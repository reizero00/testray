'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metal = require('metal');

var _metal2 = _interopRequireDefault(_metal);

var _TabsSoy = require('./Tabs.soy.js');

var _TabsSoy2 = _interopRequireDefault(_TabsSoy);

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalKeyboardFocus = require('metal-keyboard-focus');

var _metalKeyboardFocus2 = _interopRequireDefault(_metalKeyboardFocus);

var _metalSoy = require('metal-soy');

var _metalSoy2 = _interopRequireDefault(_metalSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * UI Component to navigate through tabbed data.
 */
var Tabs = function (_Component) {
	_inherits(Tabs, _Component);

	function Tabs() {
		_classCallCheck(this, Tabs);

		return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
	}

	_createClass(Tabs, [{
		key: 'attached',

		/**
   * @inheritDoc
   */
		value: function attached() {
			this.keyboardFocusManager_ = new _metalKeyboardFocus2.default(this, 'button').setCircularLength(this.tabs.length).start();
		}

		/**
   * Adds a tab to the tabs array at the specified index if given or
   * appends it at the end.
   * @param {Object} tab
   * @param {number} index
   */

	}, {
		key: 'addTab',
		value: function addTab(tab, index) {
			if (_metal2.default.isNumber(index)) {
				this.tabs.splice(index, 0, tab);
			} else {
				this.tabs.push(tab);
			}

			this.tabs = this.tabs;
		}

		/**
   * Adds a tab to the tabs array at the specified index if given or
   * appends it at the end.
   * @param {string} label
   * @param {boolean} disabled
   * @param {number} index
   */

	}, {
		key: 'addTabByName',
		value: function addTabByName(label, disabled, index) {
			if (_metal2.default.isString(label)) {
				var tab = {
					label: label,
					disabled: disabled
				};

				if (!_metal2.default.isDef(disabled)) {
					tab.disabled = false;
				}

				this.addTab(tab, index);
			}
		}

		/**
   * @inheritDoc
   */

	}, {
		key: 'created',
		value: function created() {
			this.lastState_ = {
				tab: this.tab
			};

			this.on(Tabs.Events.CHANGE_REQUEST, this.defaultChangeRequestFn_, true);
		}

		/**
   * Default `changeRequest` function, sets new state of tabs.
   * @param {EventFacade} event
   * @protected
   */

	}, {
		key: 'defaultChangeRequestFn_',
		value: function defaultChangeRequestFn_(event) {
			this.setState_(event.state);
		}

		/**
   * Fires `changeRequest` event.
   * @param {Object} state
   * @protected
   */

	}, {
		key: 'dispatchRequest_',
		value: function dispatchRequest_(state) {
			this.emit(Tabs.Events.CHANGE_REQUEST, {
				lastState: this.lastState_,
				state: state,
				totalTabs: this.tabs.length
			});
		}

		/**
   * @inheritDoc
   */

	}, {
		key: 'disposed',
		value: function disposed() {
			this.keyboardFocusManager_.dispose();
			this.keyboardFocusManager_ = null;
		}

		/**
   * Finds the first enabled tab and returns its index.
   * @return {number} Returns the index of the first tab which is not disabled.
   */

	}, {
		key: 'findFirstAvailableIndex_',
		value: function findFirstAvailableIndex_() {
			if (!this.disabled) {
				for (var i = 0; i < this.tabs.length; i++) {
					if (!this.tabs[i].disabled) {
						return i;
					}
				}
			}

			return -1;
		}

		/**
   * `onClick` handler for tab items.
   * @param {EventFacade} event
   */

	}, {
		key: 'onClickItem',
		value: function onClickItem(event) {
			var item = event.delegateTarget;

			event.preventDefault();

			var index = parseInt(item.getAttribute('data-index'));

			this.dispatchRequest_({
				tab: index
			});
		}

		/**
   * Removes the tab at the given index from the tabs array.
   * @param  {number} index
   * @return {Object} Returns the removed tab.
   */

	}, {
		key: 'removeTab',
		value: function removeTab(index) {
			if (_metal2.default.isNumber(index) && index > -1 && index < this.tabs.length) {
				var tabs = this.tabs.splice(index, 1);

				this.tabs = this.tabs;

				return tabs[0];
			}
		}

		/**
   * Set the new tabs state. The state is a payload object
   * containing the tab number, e.g. `{tab:1}`.
   * @param {Object} state
   * @protected
   */

	}, {
		key: 'setState_',
		value: function setState_(state) {
			this.tab = state.tab;

			this.lastState_ = state;
		}

		/**
   * Disables the tab at the given index in the tabs array.
   * @param  {number} index
   * @return {boolean} disabled
   */

	}, {
		key: 'setTabDisabled',
		value: function setTabDisabled(index, disabled) {
			if (_metal2.default.isNumber(index) && _metal2.default.isBoolean(disabled)) {
				this.tabs[index].disabled = disabled;

				this.tabs = this.tabs;
			}
		}

		/**
   * Synchronizes the component with the current value of the `tabs` state
   * property. Updates the length of the circular focus handling for tabs.
   */

	}, {
		key: 'syncTabs',
		value: function syncTabs() {
			if (this.keyboardFocusManager_) {
				this.keyboardFocusManager_.setCircularLength(this.tabs.length);
			}
		}

		/**
   * Toggles the disabled state of the tab at the given index in the tabs array.
   * If the tab at the given index is active, then the next nearest enabled tab
   * will become the new active tab.
   * @param  {number} index
   */

	}, {
		key: 'toggleTabDisabled',
		value: function toggleTabDisabled(index) {
			if (_metal2.default.isNumber(index) && index >= 0 && index < this.tabs.length) {
				this.tabs[index].disabled = !this.tabs[index].disabled;

				if (index === this.tab) {
					this.tab = this.findFirstAvailableIndex_();
				}

				this.tabs = this.tabs;
			}
		}
	}]);

	return Tabs;
}(_metalComponent2.default);

_metalSoy2.default.register(Tabs, _TabsSoy2.default);

Tabs.Events = {
	CHANGE_REQUEST: 'changeRequest'
};

/**
 * Default types used to style the tabs component.
 */
Tabs.TYPES = {
	NONE: 'none',
	PILLS: 'pills',
	TABS: 'tabs'
};

/**
 * State definition.
 * @type {!Object}
 * @static
 */
Tabs.STATE = {
	/**
  * Determines if the whole component should be disabled or not.
  * @type {boolean}
  * @default false
  */
	disabled: {
		validator: _metal2.default.isBoolean,
		value: false
	},

	/**
  * Tab to display on initial paint. It has two attributes, 'label', which is
  * required and 'disabled' which is optional.
  * @type {number}
  * @default Default will be set by the valueFn.
  */
	tab: {
		validator: _metal2.default.isNumber,
		valueFn: 'findFirstAvailableIndex_'
	},

	/**
  * Tabs array, holding the actual tabs.
  * @type {Array}
  * @default []
  */
	tabs: {
		validator: function validator(value) {
			return value.every(function (item) {
				return !!item.label;
			});
		},
		value: []
	},

	/**
  * Type currently being used to style the tabs component.
  * @type {string}
  * @default {string}
  */
	type: {
		validator: function validator(value) {
			return value.toUpperCase() in Tabs.TYPES;
		},
		value: Tabs.TYPES.TABS
	}
};

exports.default = Tabs;
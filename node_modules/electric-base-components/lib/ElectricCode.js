'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metalClipboard = require('metal-clipboard');

var _metalClipboard2 = _interopRequireDefault(_metalClipboard);

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalTooltip = require('metal-tooltip');

var _metalTooltip2 = _interopRequireDefault(_metalTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ElectricCode = function (_Component) {
	_inherits(ElectricCode, _Component);

	function ElectricCode() {
		_classCallCheck(this, ElectricCode);

		return _possibleConstructorReturn(this, (ElectricCode.__proto__ || Object.getPrototypeOf(ElectricCode)).apply(this, arguments));
	}

	_createClass(ElectricCode, [{
		key: 'attached',
		value: function attached() {
			var selector = '.code-container .btn-copy';

			if (!window.electricClipboardTooltip) {
				window.electricClipboardTooltip = new _metalTooltip2.default({
					delay: [300, 150],
					elementClasses: 'fade',
					events: {
						visibleChanged: function visibleChanged(event) {
							if (event.newVal) {
								this.title = 'Copy';
							}
						}
					},
					selector: selector,
					title: 'Copy',
					visible: false
				});
			}

			if (!window.electricClipboard) {
				window.electricClipboard = new _metalClipboard2.default({
					selector: selector,
					text: function text(delegateTarget) {
						window.electricClipboardTooltip.title = 'Copied';
						return delegateTarget.parentNode.querySelector('pre .code').innerText;
					}
				});
			}
		}
	}]);

	return ElectricCode;
}(_metalComponent2.default);

;

exports.default = ElectricCode;
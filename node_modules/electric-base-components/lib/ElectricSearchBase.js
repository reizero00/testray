'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metalAjax = require('metal-ajax');

var _metalAjax2 = _interopRequireDefault(_metalAjax);

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metal = require('metal');

var _metal2 = _interopRequireDefault(_metal);

var _metalPromise = require('metal-promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ElectricSearchBase = function (_Component) {
	_inherits(ElectricSearchBase, _Component);

	function ElectricSearchBase() {
		_classCallCheck(this, ElectricSearchBase);

		return _possibleConstructorReturn(this, (ElectricSearchBase.__proto__ || Object.getPrototypeOf(ElectricSearchBase)).apply(this, arguments));
	}

	_createClass(ElectricSearchBase, [{
		key: 'attached',
		value: function attached() {
			this.on('queryChanged', this.handleQueryChange_.bind(this));
		}
	}, {
		key: 'matchesArrayField_',
		value: function matchesArrayField_(value, query) {
			return value.some(function (itemName) {
				return itemName.indexOf(query) > -1;
			});
		}
	}, {
		key: 'matchesQuery_',
		value: function matchesQuery_(data, query) {
			var childrenOnly = this.childrenOnly,
			    excludePath = this.excludePath;

			var path = this.path || location.pathname;

			var hidden = data.hidden,
			    url = data.url;


			if (childrenOnly && url.indexOf(path) !== 0 && url !== path || excludePath && url.indexOf(excludePath) === 0) {

				return false;
			}

			return !hidden && this.matchesField_(data, query);
		}
	}, {
		key: 'matchesField_',
		value: function matchesField_(data, query) {
			var _this2 = this;

			var fieldNames = this.fieldNames;


			return fieldNames.some(function (fieldName) {
				var value = data[fieldName];

				var matches = false;

				if (!value) {
					return matches;
				}

				if (Array.isArray(value)) {
					matches = _this2.matchesArrayField_(value, query);
				} else if (typeof value === 'string') {
					matches = _this2.matchesTextField_(value, query);
				}

				return matches;
			});
		}
	}, {
		key: 'matchesTextField_',
		value: function matchesTextField_(value, query) {
			value = value.toLowerCase();

			return value.indexOf(query) > -1;
		}
	}, {
		key: 'filterResults_',
		value: function filterResults_(data, query) {
			var _this3 = this;

			var children = data.children,
			    childIds = data.childIds;


			var results = [];

			if (this.matchesQuery_(data, query)) {
				results.push(data);
			}

			if (children) {
				childIds.forEach(function (childId) {
					var child = children[childId];

					results = results.concat(_this3.filterResults_(child, query));
				});
			}

			return results;
		}
	}, {
		key: 'handleQueryChange_',
		value: function handleQueryChange_(_ref) {
			var newVal = _ref.newVal;

			var instance = this;

			this.search_(newVal).then(function (results) {
				instance.results = results;
			});
		}
	}, {
		key: 'search_',
		value: function search_(query) {
			var instance = this;

			return _metalPromise.CancellablePromise.resolve(this.data).then(function (data) {
				if (data) {
					return data;
				} else {
					return _metalAjax2.default.request('/site.json');
					then(res);
				}
			}).then(function (data) {
				if (data.response) {
					data = JSON.parse(data.response).index;

					instance.data = data;
				}

				var maxResults = instance.maxResults;


				var results = [];

				if (data && query) {
					results = instance.filterResults_(data, query.toLowerCase());

					if (results.length > maxResults) {
						results = results.slice(0, maxResults);
					}
				}

				return results;
			});
		}
	}]);

	return ElectricSearchBase;
}(_metalComponent2.default);

;

ElectricSearchBase.STATE = {
	childrenOnly: {
		validator: _metal2.default.isBoolean,
		value: true
	},

	data: {
		validator: _metal2.default.isObject
	},

	excludePath: {
		validator: _metal2.default.isString
	},

	fieldNames: {
		validator: _metal2.default.isArray,
		value: ['content', 'description', 'tags', 'title']
	},

	maxResults: {
		validator: _metal2.default.isNumber,
		value: 4
	},

	path: {
		validator: _metal2.default.isString,
		value: null
	},

	query: {
		validator: _metal2.default.isString,
		value: ''
	},

	results: {
		validator: _metal2.default.isArray,
		value: []
	}
};

exports.default = ElectricSearchBase;
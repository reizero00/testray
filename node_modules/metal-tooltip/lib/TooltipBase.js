'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _metal = require('metal');

var _metal2 = _interopRequireDefault(_metal);

var _metalDom = require('metal-dom');

var _metalDom2 = _interopRequireDefault(_metalDom);

var _metalPosition = require('metal-position');

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalEvents = require('metal-events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The base class to be shared between components that have tooltip behavior.
 * This helps decouple this behavior logic from the UI, which may be different
 * between components. The Tooltip component itself extends from this, as does
 * the crystal Popover component, which can be accessed at metal/crystal-popover.
 */
var TooltipBase = function (_Component) {
	_inherits(TooltipBase, _Component);

	function TooltipBase() {
		_classCallCheck(this, TooltipBase);

		return _possibleConstructorReturn(this, (TooltipBase.__proto__ || Object.getPrototypeOf(TooltipBase)).apply(this, arguments));
	}

	_createClass(TooltipBase, [{
		key: 'attached',

		/**
   * @inheritDoc
   */
		value: function attached() {
			this.align();
			this.syncTriggerEvents(this.triggerEvents);
		}

		/**
   * @inheritDoc
   */

	}, {
		key: 'created',
		value: function created() {
			this.currentAlignElement = this.alignElement;
			this.eventHandler_ = new _metalEvents.EventHandler();
		}

		/**
   * @inheritDoc
   */

	}, {
		key: 'detached',
		value: function detached() {
			this.eventHandler_.removeAllListeners();
		}

		/**
   * @inheritDoc
   */

	}, {
		key: 'disposeInternal',
		value: function disposeInternal() {
			_get(TooltipBase.prototype.__proto__ || Object.getPrototypeOf(TooltipBase.prototype), 'disposeInternal', this).call(this);
			clearTimeout(this.delay_);
		}

		/**
   * Aligns the tooltip with the best region around alignElement. The best
   * region is defined by clockwise rotation starting from the specified
   * `position`. The element is always aligned in the middle of alignElement
   * axis.
   * @param {Element=} opt_alignElement Optional element to align with.
   */

	}, {
		key: 'align',
		value: function align(opt_alignElement) {
			this.syncCurrentAlignElement(opt_alignElement || this.currentAlignElement);
		}

		/**
   * @param {!function()} fn
   * @param {number} delay
   * @private
   */

	}, {
		key: 'callAsync_',
		value: function callAsync_(fn, delay) {
			clearTimeout(this.delay_);
			this.delay_ = setTimeout(fn.bind(this), delay);
		}

		/**
   * Handles hide event triggered by `events`.
   * @param {!Event} event
   * @protected
   */

	}, {
		key: 'handleHide',
		value: function handleHide(event) {
			var delegateTarget = event.delegateTarget;
			var interactingWithDifferentTarget = delegateTarget && delegateTarget !== this.currentAlignElement;
			this.callAsync_(function () {
				if (this.locked_) {
					return;
				}
				if (interactingWithDifferentTarget) {
					this.currentAlignElement = delegateTarget;
				} else {
					this.visible = false;
					this.syncVisible(false);
				}
			}, this.delay[1]);
		}

		/**
   * Handles show event triggered by `events`.
   * @param {!Event} event
   * @protected
   */

	}, {
		key: 'handleShow',
		value: function handleShow(event) {
			var delegateTarget = event.delegateTarget;
			_get(TooltipBase.prototype.__proto__ || Object.getPrototypeOf(TooltipBase.prototype), 'syncVisible', this).call(this, true);
			this.callAsync_(function () {
				this.currentAlignElement = delegateTarget;
				this.visible = true;
			}, this.delay[0]);
		}

		/**
   * Handles toggle event triggered by `events`.
   * @param {!Event} event
   * @protected
   */

	}, {
		key: 'handleToggle',
		value: function handleToggle(event) {
			if (this.visible) {
				this.handleHide(event);
			} else {
				this.handleShow(event);
			}
		}

		/**
   * Locks tooltip visibility.
   * @param {!Event} event
   */

	}, {
		key: 'lock',
		value: function lock() {
			this.locked_ = true;
		}

		/**
   * Unlocks tooltip visibility.
   * @param {!Event} event
   */

	}, {
		key: 'unlock',
		value: function unlock(event) {
			this.locked_ = false;
			this.handleHide(event);
		}

		/**
   * Synchronizes the value of the `currentAlignElement` internal state
   * with the `alignElement`.
   * @param {Element} alignElement
   */

	}, {
		key: 'syncAlignElement',
		value: function syncAlignElement(alignElement) {
			this.currentAlignElement = alignElement;
		}

		/**
   * State synchronization logic for `currentAlignElement`.
   * @param {Element} alignElement
   * @param {Element} prevAlignElement
   */

	}, {
		key: 'syncCurrentAlignElement',
		value: function syncCurrentAlignElement(alignElement, prevAlignElement) {
			if (prevAlignElement) {
				alignElement.removeAttribute('aria-describedby');
			}
			if (alignElement) {
				var dataTitle = alignElement.getAttribute('data-title');
				if (dataTitle) {
					this.title = dataTitle;
				}
				if (this.inDocument) {
					this.alignedPosition = TooltipBase.Align.align(this.element, alignElement, this.position);
				}
			}
		}

		/**
   * State synchronization logic for `position`.
   */

	}, {
		key: 'syncPosition',
		value: function syncPosition() {
			this.syncCurrentAlignElement(this.currentAlignElement);
		}

		/**
   * State synchronization logic for `selector`.
   */

	}, {
		key: 'syncSelector',
		value: function syncSelector() {
			this.syncTriggerEvents(this.triggerEvents);
		}

		/**
   * State synchronization logic for `triggerEvents`.
   * @param {!Array<string>} triggerEvents
   */

	}, {
		key: 'syncTriggerEvents',
		value: function syncTriggerEvents(triggerEvents) {
			if (!this.inDocument) {
				return;
			}
			this.eventHandler_.removeAllListeners();
			var selector = this.selector;
			if (!selector) {
				return;
			}

			this.eventHandler_.add(this.on('mouseenter', this.lock), this.on('mouseleave', this.unlock));

			if (triggerEvents[0] === triggerEvents[1]) {
				this.eventHandler_.add(_metalDom2.default.delegate(document, triggerEvents[0], selector, this.handleToggle.bind(this)));
			} else {
				this.eventHandler_.add(_metalDom2.default.delegate(document, triggerEvents[0], selector, this.handleShow.bind(this)), _metalDom2.default.delegate(document, triggerEvents[1], selector, this.handleHide.bind(this)));
			}
		}

		/**
   * State synchronization logic for `visible`. Realigns the tooltip.
   */

	}, {
		key: 'syncVisible',
		value: function syncVisible() {
			this.align();
		}
	}]);

	return TooltipBase;
}(_metalComponent2.default);

/**
 * @inheritDoc
 * @see `Align` class.
 * @static
 */


TooltipBase.Align = _metalPosition.Align;

/**
 * TooltipBase state definition.
 * @type {!Object}
 * @static
 */
TooltipBase.STATE = {
	/**
  * The current position of the tooltip after being aligned via `Align.align`.
  * @type {number}
  */
	alignedPosition: {
		validator: TooltipBase.Align.isValidPosition
	},

	/**
  * Element to align tooltip with.
  * @type {Element}
  */
	alignElement: {
		setter: _metalDom2.default.toElement
	},

	/**
  * The current element aligned tooltip with.
  * @type {Element}
  */
	currentAlignElement: {
		internal: true,
		setter: _metalDom2.default.toElement
	},

	/**
  * Delay showing and hiding the tooltip (ms).
  * @type {!Array<number>}
  * @default [ 500, 250 ]
  */
	delay: {
		validator: Array.isArray,
		value: [500, 250]
	},

	/**
  * Trigger events used to bind handlers to show and hide tooltip.
  * @type {!Array<string>}
  * @default ['mouseenter', 'mouseleave']
  */
	triggerEvents: {
		validator: Array.isArray,
		value: ['mouseenter', 'mouseleave']
	},

	/**
  * If a selector is provided, tooltip objects will be delegated to the
  * specified targets by setting the `alignElement`.
  * @type {?string}
  */
	selector: {
		validator: _metal2.default.isString
	},

	/**
  * The position to try alignment. If not possible the best position will be
  * found.
  * @type {number}
  * @default Align.Bottom
  */
	position: {
		validator: TooltipBase.Align.isValidPosition,
		value: TooltipBase.Align.Bottom
	},

	/**
  * Content to be placed inside tooltip.
  * @type {string}
  */
	title: {}
};

/**
 * CSS classes used for each align position.
 * @type {!Array}
 * @static
 */
TooltipBase.PositionClasses = ['top', 'right', 'bottom', 'left'];

exports.default = TooltipBase;
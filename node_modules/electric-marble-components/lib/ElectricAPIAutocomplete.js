'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metalAjax = require('metal-ajax');

var _metalAjax2 = _interopRequireDefault(_metalAjax);

var _metalAutocomplete = require('metal-autocomplete');

var _metalAutocomplete2 = _interopRequireDefault(_metalAutocomplete);

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metal = require('metal');

var _metal2 = _interopRequireDefault(_metal);

var _metalPromise = require('metal-promise');

var _metalPromise2 = _interopRequireDefault(_metalPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ElectricAPIAutocomplete = function (_Component) {
	_inherits(ElectricAPIAutocomplete, _Component);

	function ElectricAPIAutocomplete() {
		_classCallCheck(this, ElectricAPIAutocomplete);

		return _possibleConstructorReturn(this, (ElectricAPIAutocomplete.__proto__ || Object.getPrototypeOf(ElectricAPIAutocomplete)).apply(this, arguments));
	}

	_createClass(ElectricAPIAutocomplete, [{
		key: 'attached',
		value: function attached() {
			this.autocomplete = new _metalAutocomplete2.default({
				autoBestAlign: false,
				data: this.search_.bind(this),
				format: this.format_.bind(this),
				inputElement: this.input,
				select: function select(event) {
					window.location = event.url;
				}
			});
		}
	}, {
		key: 'disposed',
		value: function disposed() {
			var autocomplete = this.autocomplete;

			if (autocomplete) {
				autocomplete.dispose();
			}
		}
	}, {
		key: 'format_',
		value: function format_(data) {
			var url = this.formatURL_(data);

			return {
				textPrimary: '<a class="autocomplete-link" href="' + url + '">\n\t\t\t\t<div class="autocomplete-result">\n\t\t\t\t\t<p class="autocomplete-title">' + data.name + '</p>\n\t\t\t\t\t<p class="autocomplete-text">' + data.memberof + '</p>\n\t\t\t\t</div>\n\t\t\t</a>',
				url: url
			};
		}
	}, {
		key: 'formatURL_',
		value: function formatURL_(data) {
			var memberof = data.memberof;
			var name = data.name;

			var url = '/api/' + this.project.ref + '/' + (memberof || name) + '.html';

			if (memberof && name !== memberof) {
				url += '#' + name;
			}

			return url;
		}
	}, {
		key: 'matchesQuery_',
		value: function matchesQuery_(entity, query) {
			var name = entity.name;

			name = name ? name.toLowerCase() : '';

			return name.indexOf(query) > -1;
		}
	}, {
		key: 'filterResults_',
		value: function filterResults_(data, query) {
			var instance = this;
			var results = [];

			data.forEach(function (entity) {
				if (instance.matchesQuery_(entity, query)) {
					results.push(entity);
				}

				if (entity.members) {
					results = results.concat(instance.filterResults_(entity.members.instance, query));
					results = results.concat(instance.filterResults_(entity.members.static, query));
				}
			});

			return results;
		}
	}, {
		key: 'search_',
		value: function search_(query) {
			var instance = this;

			return _metalPromise2.default.resolve(this.data).then(function (data) {
				if (data) {
					return data;
				} else {
					return _metalAjax2.default.request(instance.dataSource);
				}
			}).then(function (data) {
				if (data.response) {
					data = JSON.parse(data.response);

					instance.data = data;
				}

				var results = [];

				if (data && query) {
					results = instance.filterResults_(data, query.toLowerCase());

					if (results.length > instance.maxResults) {
						results = results.slice(0, instance.maxResults);
					}
				}

				return results;
			});
		}
	}]);

	return ElectricAPIAutocomplete;
}(_metalComponent2.default);

ElectricAPIAutocomplete.STATE = {
	dataSource: {
		validator: _metal2.default.isString
	},

	maxResults: {
		validator: _metal2.default.isNumber
	},

	project: {
		validator: _metal2.default.isObject
	},

	input: {
		validator: _metal2.default.isElement
	}
};

exports.default = ElectricAPIAutocomplete;